; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	C:\Kurs\promer1\promer1\promer1.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_main
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T2557 = -28						; size = 4
$T2556 = -24						; size = 4
_j$2535 = -20						; size = 4
_middle$2532 = -16					; size = 4
_mas$2536 = -12						; size = 4
_start$2533 = -8					; size = 4
_final$2534 = -4					; size = 4
_A$ = 8							; size = 4
_first$ = 12						; size = 4
_last$ = 16						; size = 4
_main	PROC
; File c:\kurs\promer1\promer1\promer1.cpp
; Line 2
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
; Line 3
	mov	eax, DWORD PTR _first$[ebp]
	cmp	eax, DWORD PTR _last$[ebp]
	jge	$LN11@main
; Line 5
	mov	eax, DWORD PTR _first$[ebp]
	add	eax, DWORD PTR _last$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _first$[ebp]
	push	ecx
	mov	edx, DWORD PTR _A$[ebp]
	push	edx
	call	_main
	add	esp, 12					; 0000000cH
; Line 6
	mov	eax, DWORD PTR _last$[ebp]
	push	eax
	mov	eax, DWORD PTR _first$[ebp]
	add	eax, DWORD PTR _last$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _A$[ebp]
	push	ecx
	call	_main
	add	esp, 12					; 0000000cH
; Line 8
	push	400					; 00000190H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2556[ebp], eax
	mov	edx, DWORD PTR $T2556[ebp]
	mov	DWORD PTR _mas$2536[ebp], edx
; Line 9
	mov	eax, DWORD PTR _first$[ebp]
	add	eax, DWORD PTR _last$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _middle$2532[ebp], eax
; Line 10
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _start$2533[ebp], eax
; Line 11
	mov	ecx, DWORD PTR _middle$2532[ebp]
	add	ecx, 1
	mov	DWORD PTR _final$2534[ebp], ecx
; Line 12
	mov	edx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _j$2535[ebp], edx
	jmp	SHORT $LN9@main
$LN8@main:
	mov	eax, DWORD PTR _j$2535[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2535[ebp], eax
$LN9@main:
	mov	ecx, DWORD PTR _j$2535[ebp]
	cmp	ecx, DWORD PTR _last$[ebp]
	jg	SHORT $LN7@main
; Line 13
	mov	edx, DWORD PTR _start$2533[ebp]
	cmp	edx, DWORD PTR _middle$2532[ebp]
	jg	SHORT $LN6@main
	mov	eax, DWORD PTR _final$2534[ebp]
	cmp	eax, DWORD PTR _last$[ebp]
	jg	SHORT $LN5@main
	mov	ecx, DWORD PTR _start$2533[ebp]
	mov	edx, DWORD PTR _A$[ebp]
	mov	eax, DWORD PTR _final$2534[ebp]
	mov	esi, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	cmp	ecx, DWORD PTR [esi+eax*4]
	jge	SHORT $LN6@main
$LN5@main:
; Line 15
	mov	edx, DWORD PTR _j$2535[ebp]
	mov	eax, DWORD PTR _mas$2536[ebp]
	mov	ecx, DWORD PTR _start$2533[ebp]
	mov	esi, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 16
	mov	edx, DWORD PTR _start$2533[ebp]
	add	edx, 1
	mov	DWORD PTR _start$2533[ebp], edx
; Line 18
	jmp	SHORT $LN4@main
$LN6@main:
; Line 20
	mov	eax, DWORD PTR _j$2535[ebp]
	mov	ecx, DWORD PTR _mas$2536[ebp]
	mov	edx, DWORD PTR _final$2534[ebp]
	mov	esi, DWORD PTR _A$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 21
	mov	eax, DWORD PTR _final$2534[ebp]
	add	eax, 1
	mov	DWORD PTR _final$2534[ebp], eax
$LN4@main:
; Line 22
	jmp	SHORT $LN8@main
$LN7@main:
; Line 23
	mov	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _j$2535[ebp], ecx
	jmp	SHORT $LN3@main
$LN2@main:
	mov	edx, DWORD PTR _j$2535[ebp]
	add	edx, 1
	mov	DWORD PTR _j$2535[ebp], edx
$LN3@main:
	mov	eax, DWORD PTR _j$2535[ebp]
	cmp	eax, DWORD PTR _last$[ebp]
	jg	SHORT $LN1@main
	mov	ecx, DWORD PTR _j$2535[ebp]
	mov	edx, DWORD PTR _A$[ebp]
	mov	eax, DWORD PTR _j$2535[ebp]
	mov	esi, DWORD PTR _mas$2536[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN2@main
$LN1@main:
; Line 24
	mov	ecx, DWORD PTR _mas$2536[ebp]
	mov	DWORD PTR $T2557[ebp], ecx
	mov	edx, DWORD PTR $T2557[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN11@main:
; Line 27
	xor	eax, eax
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
END
